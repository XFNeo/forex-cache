name: Maven & Docker

on:
  push:
    branches: [ "master" ]
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Step 1 - Checkout
      uses: actions/checkout@v3

    - name: Step 2 - Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Step 3 - Cache local Maven repository
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Step 4 - Build with Maven
      run: mvn -B package --file pom.xml

    - name: Step 5 - Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ secrets.DOCKER_IMAGE_NAME }}
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.0.') }}
          type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}

    - name: Step 6 - Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Step 7 - Docker build and push
      id: docker_build
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Step 8 - Deploy docker image
      env:
        CONTAINER_RELOAD_TOKEN: ${{ secrets.CONTAINER_RELOAD_TOKEN }}
        CONTAINER_RELOAD_URL: ${{ secrets.CONTAINER_RELOAD_URL }}
        IMAGE: ${{ secrets.DOCKER_IMAGE_NAME }}@${{ steps.docker_build.outputs.digest }}
      run: |
        response_code=$(curl --request POST -s -o /dev/null -w "%{http_code}" ${CONTAINER_RELOAD_URL} -H "apikey: ${CONTAINER_RELOAD_TOKEN}" -H "Content-Type: application/json" --data-raw "{\"image\": \"${IMAGE}\"}")
        if [ "${response_code}" != 200 ]; then
          echo "response_code is ${response_code}"
          exit 1
        fi
